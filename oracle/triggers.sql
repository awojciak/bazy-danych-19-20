CREATE OR REPLACE TRIGGER NowaRezerwacja
    AFTER INSERT ON REZERWACJE
    FOR EACH ROW
    BEGIN
        INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS)
        VALUES (:NEW.NR_REZERWACJI, CURRENT_DATE, 'N');

        UPDATE WYCIECZKI
            SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC - 1
                WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
    END;

CREATE OR REPLACE TRIGGER NowyStatusRezerwacji
    AFTER UPDATE ON REZERWACJE
    FOR EACH ROW
    BEGIN
        INSERT INTO REZERWACJE_LOG(ID_REZERWACJI, DATA, STATUS)
        VALUES (:NEW.NR_REZERWACJI, CURRENT_DATE, :NEW.STATUS);

        IF :NEW.STATUS = 'A' THEN
            UPDATE WYCIECZKI
                SET LICZBA_WOLNYCH_MIEJSC = LICZBA_WOLNYCH_MIEJSC + 1
                    WHERE ID_WYCIECZKI = :NEW.ID_WYCIECZKI;
        END IF;
    END;

CREATE OR REPLACE TRIGGER ZabronUsuwaniaRezerwacji
    BEFORE DELETE ON REZERWACJE
    FOR EACH ROW
    BEGIN
        RAISE_APPLICATION_ERROR(-20999, 'Usuwanie rezerwacji jest zabronione');
    END;


CREATE OR REPLACE TRIGGER LiczbaWolnychMiejscEdytowanejWycieczki
    BEFORE UPDATE ON WYCIECZKI
    FOR EACH ROW
    BEGIN
        SELECT :OLD.LICZBA_WOLNYCH_MIEJSC + (:NEW.LICZBA_MIEJSC - :OLD.LICZBA_MIEJSC)
        INTO :NEW.LICZBA_WOLNYCH_MIEJSC
        FROM DUAL;
    END;